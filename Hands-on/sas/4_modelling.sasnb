[{"kind":1,"language":"markdown","value":"## Modelling","outputs":[]},{"kind":1,"language":"markdown","value":"### TRAIN MODEL","outputs":[]},{"kind":1,"language":"markdown","value":"Assign Macro Variables for libname, input data, output data, and code file(s)","outputs":[]},{"kind":1,"language":"markdown","value":"* Prepare the training data for modelling","outputs":[]},{"kind":2,"language":"sas","value":"proc contents data=wbdata.&trainValidate.;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### Logistic Regression - PROC GENSELECT","outputs":[]},{"kind":2,"language":"sas","value":"/* \nFitting a Logistic Regression performing backward substitution to select variables. \nThe PROC GENSELECT is a new procedure that used to require CAS and the CAS language (action sets) to run on SAS Viya\n*/\n\n%let classInputVars ='CreditPolicy'n'Delinquencies2Yrs'n 'PublicRecord'n 'Purpose'n;\n%let intervalInputVars ='CreditLineAge'n 'DebtIncRatio'n 'FICOScore'n 'Inquiries6Mnths'n 'LogAnnualInc'n 'RevBalance'n 'RevUtilization'n 'Installment'n 'InterestRate'n;\n\n\nproc genselect data=wbdata.&trainValidate. normalize=YES;\n  partition rolevar='_PartInd_'n (TRAIN='1' VALIDATE='2');\n  class &classInputVars. / param=GLM order=formatted;\n  model &target. (event='1')=  &intervalInputVars. &classInputVars. / link=LOGIT dist=BINARY;\n  selection method=STEPWISE DETAILS=ALL plots=all;\n  savestate rstore=astlib.&SCAstore.; \n  ods output \n     PredProbName       = work.PredProbName \n     ModelInfo          = work.PredIntoName\n     SelectionSummary   = work.Selection(drop=Control)\n     ParameterEstimates = work.ParamEstsA\n     FitStatistics      = work.OutFit \n  ;\n  code file=&SCscorecodeFile. pcatall iprob labelid=13582328; \nrun;","outputs":[]},{"kind":2,"language":"sas","value":"*Save the model to astore;\nproc astore;\n   download rstore = astlib.&SCAstore.\n            store = \"&project_folder./Live-SAS-WorkbenchWorkshop/Hands-on/sas/astore/logistic_model.sasast\";\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### Review the model fit statistics","outputs":[]},{"kind":2,"language":"sas","value":"* Use the ASTORE from the PROC GENSELECT to score the original data and create a scored dataset ;\nproc astore;\n   score data=wbdata.&trainValidate.\n         rstore=astlib.&SCAstore.\n         out=&trainValidate._scored\n         COPYVAR=customerID\n         ;\nquit;\n\nproc sql;\n      create table wbdata.&trainValidate._scored as\n      select t1.*, t2.p_default0, t2.p_default1, t2.i_default \n      from wbdata.&trainValidate. as t1 left join &trainValidate._scored as t2 on\n            t1.customerID=t2.customerID\n;\nquit;\n","outputs":[]},{"kind":2,"language":"sas","value":"*Let's analyze train and validation fit metrics;\nproc format;\n\tvalue partindlbl 1 = 'Training' 2 = 'Validation';\nrun;\n\nproc assess data=wbdata.&trainValidate._scored ncuts=10 nbins=5;\n   var p_default1;\n   target &target. / event=\"1\" level=nominal;\n   fitstat pvar=p_default0 / pevent=\"0\" ;\n   by _PartInd_;\n   format _partind_ partindlbl.; \n   ods output rocinfo=logistic_roc;\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"*Get ROC Info;\ndata logistic_roc_info;\n  set logistic_roc;\n\n  length model_data $ 30;\n  if _PartInd_ = 1 then model_data ='Train';\n  if _PartInd_ = 2 then model_data ='Valid';\nrun;\n\ntitle \"AUC\";\nproc sql;\n  select distinct model_data, c from logistic_roc_info order by c desc;\nquit;\n\n*Plot ROC Curve;\nproc sgplot data=logistic_roc aspect=1;\n\ttitle \"ROC Curve\";\n\txaxis label=\"False positive rate\" values=(0 to 1 by 0.1);\n\tyaxis label=\"True positive rate\"  values=(0 to 1 by 0.1);\n\tlineparm x=0 y=0 slope=1 / transparency=.7 LINEATTRS=(Pattern=34);\n\tseries x=fpr y=sensitivity /group=_partind_;\n\tformat _partind_ partindlbl.;\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"/* Define what subset of the data to use: 1=train, 2=validation and assess bias on Race */\n%let datasubset=1;\n\n%let varaible_to_assess = race;\ntitle \"Bias Metrics: Training\";\nproc assessbias data=wbdata.&trainValidate._scored(where=(_PartInd_=&datasubset.)) ncuts=10 nbins=5;\n   var p_default1;\n   target &target. / event=\"1\" level=nominal;\n   fitstat pvar=p_default0 / pevent=\"0\" ;\n   sensitiveVar &varaible_to_assess.;\nrun;\n\n/* Define what subset of the data to use: 1=train, 2=validation */\n%let datasubset=2;\n\ntitle \"Bias Metrics: Validation\";\nproc assessbias data=wbdata.&trainValidate._scored(where=(_PartInd_=&datasubset.)) ncuts=10 nbins=5;\n   var p_default1;\n   target &target. / event=\"1\" level=nominal;\n   fitstat pvar=p_default0 / pevent=\"0\" ;\n   sensitiveVar &varaible_to_assess.;\nrun;\ntitle ;","outputs":[]},{"kind":1,"language":"markdown","value":"#### Output Dictionary:\n![Bias Metrics](../../img/bias_metrics.png)","outputs":[]},{"kind":1,"language":"markdown","value":"### Gradient Boosting model\n\nTrain a Gradient Boosting Model, test different hyperparameters and test its performance.\n\n![GradBoost Overview](../../img/GradBoost_Overview.png)\n![GradBoost Hyperparams](../../img/GradBoost_Hyperparams.png)\n\nFor further guidance: https://go.documentation.sas.com/doc/en/workbenchcdc/v_001/vwbcasml/vwbcasml_gradboost_overview.htm","outputs":[]},{"kind":2,"language":"sas","value":"* Try different parameters and input variables to test the performance of different models;\n\nproc gradboost data = wbdata.&trainValidate.\n    lasso = 0.5\n    learningrate= 0.01\n    maxbranch=4\n    maxdepth = 5\n    ntrees=100\n    ridge=0.5\n    seed = 42;\n    partition rolevar='_PartInd_'n (TRAIN='1' VALIDATE='2');\n    input &intervalInputVars. / level=interval;\n    input &classInputVars. / level = nominal; \n    target &target. / level = nominal;\n    savestate rstore=astlib.Gradboost_model;\nrun; ","outputs":[]},{"kind":2,"language":"sas","value":"* Score train and validation data with the newly developed model;\nproc astore;\n   score data=wbdata.&trainValidate.\n         rstore=astlib.Gradboost_model\n         out=&trainValidate._gb_scored_0\n         COPYVAR=customerID\n         ;\nquit;\n\nproc sql;\n      create table &trainValidate._gb_scored as\n      select t1.*, t2.p_default0, t2.p_default1, t2.i_default \n      from wbdata.&trainValidate. as t1 left join &trainValidate._gb_scored_0 as t2 on\n            t1.customerID=t2.customerID\n;\nquit;\n","outputs":[]},{"kind":2,"language":"sas","value":"* Assess the model performance;\nproc assess data=&trainValidate._gb_scored ncuts=10 nbins=5;\n   var p_default1;\n   target &target. / event=\"1\" level=nominal;\n   fitstat pvar=p_default0 / pevent=\"0\" ;\n   by _PartInd_;\n   format _partind_ partindlbl.; \n   ods output rocinfo=gb_roc;\nrun;","outputs":[]},{"kind":2,"language":"sas","value":"*Compare ROC Curve between the Logistic and the Gradient Boosting Model;\ndata all_rocinfo;\n  set logistic_roc(in=l)\n      gb_roc(in=gb);\n\n  length model $ 16;\n  select;\n      when (l) model='Logistic';\n      when (gb) model='GB';\n     end;\n  length model_data $ 30;\n  if _PartInd_ = 1 then model_data = catx('-', model, 'Train');\n  if _PartInd_ = 2 then model_data = catx('-', model, 'Valid');\nrun;\n\ntitle \"AUC\";\nproc sql;\n  select distinct model_data, c from all_rocinfo order by c desc;\nquit;\n\nproc sgplot data=all_rocinfo aspect=1;\n  title \"ROC Curve\";\n  xaxis values=(0 to 1 by 0.25) grid offsetmin=.05 offsetmax=.05;\n  yaxis values=(0 to 1 by 0.25) grid offsetmin=.05 offsetmax=.05;\n  lineparm x=0 y=0 slope=1 / transparency=.7;\n  series x=fpr y=sensitivity / group=model_data;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"### Export the data\nWe export the data after applying the WOE Transformation to later use it in Python Modelling","outputs":[]},{"kind":2,"language":"sas","value":"*Export the SAS dataset used for training the modelsfor later use in Python;\n\nproc export data=wbdata.&partData.\n    outfile=\"&project_folder./Live-SAS-WorkbenchWorkshop/Data/cleaned_data/train_valid_test.csv\"\n    dbms=csv\n    replace;\nrun;","outputs":[]}]